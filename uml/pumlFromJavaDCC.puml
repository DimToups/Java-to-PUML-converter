@startuml
'https://plantuml.com/class-diagram

skinparam style strictuml
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold

hide empty members

class PumlDoclet implements Doclet{
    - name: String
    - directory: String
    - packageName: String
    - {static}debug: boolean

    + init(Locale, Reporter)
    + getName(): String
    + getSupportedOptions(): Set<? extends Option>
    + getSupportedSourceVersion(): SourceVersion
    + run(DocletEnvironment): boolean
}

class PumlDiagram {
    - packageName: String
    - classesContent: String
    - name: String
    - directory: String

    + <<create>> PumlDiagram(String : String)
    + setClasses(ArrayList<ClassContent> : String)
    + makeDiagram()
    + initFile()
    + endFile()
}

PumlDoclet o-> "1\ndiagram" PumlDiagram : Crée le diagramme\nà partir de \n >
PumlDoclet o-d-> "1\nelement" Element : Utilise \n >
PumlDiagram o-> "[*]\nclasses" ClassContent : Stocke \n >

class Element extends AnnotedConstruct {
    asType() : TypeMirror
    getKind() : ElementKind
    getModifiers() : Modifier[*]
    getSimpleName() : Name
    getEnclosingElement() : Element
    getEnclosingElement() : Element[*]
    equals(var1 : Object) : Boolean
    hashCode() : Integer
    getAnnotationMirrors() : AnnotationMirror[*]
    getAnnotationsByType(var1 : Class<a>) : Annotation
    accept(var1 : ElementVisitor<R, P>, var2 : P) : <R, P> R
}

class ClassContent {
    - className: String
    - classType: ElementKind
}

class Attribut {
    - nom: String
    - type: PrimitiveType
}

class Methode {
    - nom: String
    - type: PrimitiveType
}

enum Visibilite {
    PUBLIC
    PARTIAL
    PRIVATE
}

Attribut o-d-> "1\nvisible\n" Visibilite : A pour visibilité \n >
Methode o-d-> "1\nvisible\n" Visibilite : A pour visibilité \n >
ClassContent o-d-> "[*]\nclassMethods\n" Methode : Contient \t >
ClassContent o-d-> "[*]\nclassAttributs\n" Attribut : Contient \t >


@enduml